# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "master", "main" ]

env:
  PROJECT_ID: kube-ml-365607
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: terraform-gke    # TODO: update to cluster name
  GKE_ZONE: us-central1-a   # TODO: update to cluster zone
  DEPLOYMENT_NAME: webapp-dpl # TODO: update to deployment name
  #REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: sharks/web-app
  GKE_TRUST: ${{ secrets.GKE_SA_KEY }}
  CRED: ${{ secrets.GKE_SERVICEACCOUNT }}
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build the Docker image
      run: |
        docker build . --file Dockerfile --tag web-app:last
        docker image tag web-app:last sharks/web-app:$GITHUB_SHA
        docker images
    - name: DockerHub login
      run: docker login --username sharks --password ${{ secrets.PASS_DOCKHUB }}
    - name: push dockerhub
      run: docker image push sharks/web-app:$GITHUB_SHA


    # Alternative option - authentication via credentials json
    - id: 'auth'
      name: google_authenticate
      uses: 'google-github-actions/auth@v0'
      with:
         credentials_json: '${{ env.CRED }}'
        
    - name: Show gcloud
      run: |
        gcloud container clusters list
        

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: projects/kube-ml-365607/locations/us-central1/clusters/terraform-gke
        #location: ${{ env.GKE_ZONE }}

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd ./kube
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      if: github.ref == 'refs/heads/main'
      run: |-
        # replacing the image name in the k8s template
        cd ./kube
        ls -ltr
        ./kustomize edit set image sharks/web-app:latest=$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
